    /// <summary>
    /// {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}
    /// </summary>
    {{#generatePropertyChanged}}
    [ImplementPropertyChanged]
    {{/generatePropertyChanged}}
    {{>visibility}} partial class {{classname}}{{#parent}}: {{{parent}}}{{/parent}} {
        {{#vars}}
        {{#isEnum}}
{{>modelInnerEnum}}
        {{/isEnum}}
        {{#items.isEnum}}
        {{#items}}
{{>modelInnerEnum}}
        {{/items}}
        {{/items.isEnum}}
        {{/vars}}
        {{#vars}}
        {{#isEnum}}
        /// <summary>
        /// {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{{description}}}{{/description}}
        /// </summary>{{#description}}
        /// <value>{{{description}}}</value>{{/description}}
        [JsonProperty("{{baseName}}")]
        public {{{datatypeWithEnum}}}{{#isEnum}}{{^isContainer}}?{{/isContainer}}{{/isEnum}} {{name}} { get; set; }
        {{/isEnum}}
        {{/vars}}
    {{#hasRequired}}
    {{/hasRequired}}        
        {{#vars}}
        {{^isEnum}}
        /// <summary>
        /// {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{description}}{{/description}}
        /// </summary>{{#description}}
        /// <value>{{description}}</value>{{/description}}
        [JsonProperty("{{baseName}}")]
        public {{{datatype}}} {{name}} { get; {{#isReadOnly}}private {{/isReadOnly}}set; }
        {{/isEnum}}
        {{/vars}}
{{^netStandard}}
{{#generatePropertyChanged}}
        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

{{/generatePropertyChanged}}
{{/netStandard}}
    }